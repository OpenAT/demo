(function($) {

Drupal.behaviors.campaignion_manage_translation_sets = {};
Drupal.behaviors.campaignion_manage_translation_sets.attach = function(context) {
  $('.campaignion-manage-content-listing .node-translations', context).hide().each(function() {
    var $translations = $(this);
    var $tset = $translations.prev();

    var $showHideLink = $('<a class="show" href="#">' + Drupal.t('show translations') + '</a>').click(function(event) {
      event.preventDefault();
      var $showHideLink = $(this);
      if ($translations.is(':visible')) {
        $translations.hide();
        $showHideLink.html(Drupal.t('show translations')).addClass('show').removeClass('hide');
      } else {
        $translations.show();
        $showHideLink.html(Drupal.t('hide translations')).addClass('hide').removeClass('show');
      }
    }).appendTo($tset.find('.campaignion-manage'));
  });
};

})(jQuery);
;
// Generated by CoffeeScript 1.10.0
(function() {
  var baseUrl, checkAndRedirect, getLanguageLinks, hideOverlay, mayBeBot, ready, referrerHasSameHost, removeEl;

  baseUrl = function(href) {
    var baseurl, p;
    p = href.indexOf('//');
    p = href.indexOf('/', p + 2);
    return baseurl = href.substr(0, p + 1);
  };

  ready = function(fn) {
    if (document.readyState !== 'loading') {
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', fn);
    }
  };

  referrerHasSameHost = function() {
    var base;
    if (document.referrer) {
      base = baseUrl(document.referrer);
      return window.location.href.substr(0, base.length) === base;
    }
    return false;
  };

  getLanguageLinks = function() {
    var e, i, len, links, ref;
    links = {};
    ref = document.querySelectorAll('link[rel="alternate"][hreflang]');
    for (i = 0, len = ref.length; i < len; i++) {
      e = ref[i];
      links[e.getAttribute('hreflang')] = e.getAttribute('href');
    }
    return links;
  };

  mayBeBot = function() {
    var agent, engine, i, iagent, j, len, len1, ref, ref1, search;
    agent = navigator.userAgent;
    if (!agent) {
      return true;
    }
    if (agent.indexOf('Mozilla') !== -1) {
      iagent = agent.toLowerCase();
      ref = ['bot', 'crawler', 'spider'];
      for (i = 0, len = ref.length; i < len; i++) {
        search = ref[i];
        if (iagent.indexOf(search) !== -1) {
          return true;
        }
      }
      return false;
    }
    ref1 = ['Webkit', 'Safari', 'Opera', 'Dillo', 'Lynx', 'Links', 'w3m', 'Midori', 'iCab'];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      engine = ref1[j];
      if (agent.indexOf(engine) !== -1) {
        return false;
      }
    }
    return true;
  };

  hideOverlay = function() {
    ready(function() {
      removeEl(document.getElementById('geoip-language-redirect-overlay'));
      if (window.geoip_language_redirect_overlay_old_error) {
        window.onerror = window.geoip_language_redirect_overlay_old_error;
      }
    });
  };

  removeEl = function(el) {
    el && el.parentNode && el.parentNode.removeChild(el);
    el = null;
  };

  checkAndRedirect = function() {
    var current, links;
    if (referrerHasSameHost() || mayBeBot()) {
      hideOverlay();
      return;
    }
    links = getLanguageLinks();
    current = document.getElementsByTagName('html')[0].getAttribute('lang');
    jQuery.getJSON('/geoip-language-suggestions').done(function(data) {
      var i, lang, len;
      for (i = 0, len = data.length; i < len; i++) {
        lang = data[i];
        if (lang === current) {
          hideOverlay();
          return;
        }
        if (links.hasOwnProperty(lang)) {
          window.location = links[lang];
          return;
        }
      }
      hideOverlay();
    }).fail(function() {
      hideOverlay();
    });
  };

  checkAndRedirect();

}).call(this);
;
(function($) {

Drupal.behaviors.global_colorbox = {};
Drupal.behaviors.global_colorbox.attach = function(context, settings) {
  if ($.fn.colorbox) {
    var fieldImages = $('.region-content .file-image', context);
    var mediaImages = $('.region-content img.media-element, .field-name-field-image img[data-fid]', context).not('a img');
    var shareURL;
    var baseOptions = {
      maxWidth: '80%',
      maxHeight: '95%',
      fixed: false,
      rel: 'colorbox'
    }
    // container for "eager" loaded colorbox content
    var tmphtml = document.createDocumentFragment();

    // resize colorbox when image is loaded
    // imagesLoaded is included in jquery.masonry.js in theme
    if ($.fn.imagesLoaded) {
      $('.colorbox-popup-content').imagesLoaded(function () {
        $.colorbox.resize();
      });
    }

    // provide the ajax callback a GET param for the url to share
    if (Drupal.settings.globalColorbox && Drupal.settings.globalColorbox.nid) {
      shareURL = '?share=node/' + Drupal.settings.globalColorbox.nid
    }

    // rendered via file_entity
    fieldImages.each(function () {
      var $fi = $(this);
      var fid = $(this).attr('id').substr(5);
      var options = $.extend({}, baseOptions, {
        href: settings.basePath + 'ajax/colorbox/' + fid + shareURL
      });
      var colorboxSettings = $.extend( {}, settings.colorbox, options );
      // call colorbox only if there is an fid to call
      if (fid) {
        $fi.colorbox(colorboxSettings);
        // "eager" load colorbox content into a document fragment
        // to prevent ugly resizing on first colorbox triggering
        $.ajax({
          url: settings.basePath + 'ajax/colorbox/' + fid + shareURL,
          success: function (data) {
            $(data).appendTo(tmphtml);
          }
        });
      }
    });
    // rendered via media wysiwyg
    mediaImages.each(function () {
      var $mi = $(this);
      var fid = $(this).attr('data-fid');
      var url = settings.basePath + 'ajax/colorbox/' + fid + shareURL;
      var options = $.extend({}, baseOptions, {
        href: url
      });
      var colorboxSettings = $.extend( {}, settings.colorbox, options );
      // call colorbox only if there is an URL to call
      $mi.colorbox(colorboxSettings);
      // see above
      $.ajax({
        url: url,
        success: function (data) {
          $(data).appendTo(tmphtml);
        }
      });
    });
  };
};

})(jQuery);

;
// Generated by CoffeeScript 1.9.3
var $, EndpointRegistry, PollingEndpoint;

$ = jQuery;

PollingEndpoint = (function() {
  function PollingEndpoint(settings) {
    var defaults;
    defaults = {
      url: '',
      interval: 5000,
      intervalMultiplier: 1.07,
      maxErrorCount: 15
    };
    this.settings = $.extend({}, defaults, settings);
    this.interval = this.settings.interval;
    this.errorCount = 0;
    this.callbacks = {};
    this.stopped = false;
  }

  PollingEndpoint.prototype.scheduleNextPoll = function() {
    return setTimeout((function(_this) {
      return function() {
        _this.poll();
        if (!_this.stopped) {
          _this.interval = Math.floor(_this.interval * _this.settings.intervalMultiplier);
          return _this.scheduleNextPoll();
        }
      };
    })(this), this.interval);
  };

  PollingEndpoint.prototype.poll = function() {
    if (this.stopped) {
      return;
    }
    return jQuery.ajax({
      contentType: 'application/json',
      url: this.settings.url,
      success: (function(_this) {
        return function(data) {
          var _, callback, ref;
          ref = _this.callbacks;
          for (_ in ref) {
            callback = ref[_];
            callback(data);
          }
        };
      })(this),
      error: (function(_this) {
        return function(data) {
          if (data.status === '403') {
            _this.stopped = true;
          } else if (data.status === '404') {
            _this.stopped = true;
          } else if (_this.errorCount >= _this.settings.maxErrorCount) {
            _this.stopped = true;
          } else {
            _this.errorCount += 1;
          }
        };
      })(this)
    });
  };

  PollingEndpoint.prototype.addCallback = function(key, callback) {
    this.callbacks[key] = callback;
    return this;
  };

  return PollingEndpoint;

})();

EndpointRegistry = (function() {
  function EndpointRegistry() {
    this.registry = {};
  }

  EndpointRegistry.prototype.registerUrl = function(url, key, callback) {
    if (!this.registry[url]) {
      this.registry[url] = new PollingEndpoint({
        url: url
      });
    }
    return this.registry[url].addCallback(key, callback);
  };

  EndpointRegistry.prototype.start = function() {
    var endpoint, ref, url;
    ref = this.registry;
    for (url in ref) {
      endpoint = ref[url];
      endpoint.scheduleNextPoll();
    }
  };

  return EndpointRegistry;

})();

Drupal.behaviors.polling = {
  registry: new EndpointRegistry(),
  attach: function(context, settings) {
    var defaults, start;
    if ($('html', context).length) {
      defaults = {
        initialTimeout: 500
      };
      settings = $.extend({}, defaults, settings.polling);
      start = (function(_this) {
        return function() {
          return _this.registry.start();
        };
      })(this);
      return setTimeout(start, settings.initialTimeout);
    }
  }
};
;
/*!
 * jQuery plugin to load and display a recent supporters listing on your website
 * https://github.com/moreonion/jquery-recent-supporters
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright (c) 2013 more onion
 * Released under the MIT license
 * https://github.com/moreonion/jquery-recent-supporters/blob/master/LICENSE
 *
 */


(function ( $ ) {

  $.fn.recentSupporters = function( options ) {

    // These are the defaults.
    var defaults = {
      createListIfMissing: true,
      cycleSupporters: true,
      cycleInterval: 4000,
      cycleEasing: 'linear',
      updateTimeagoInterval: 5700,
      maxSupportersVisible: 6,
      maxSupportersInContainer: 15,
      showCountry: true,
      showComment: false,
      maxPollErrorCount: 15,
      texts: {},
      countries: {}
    }
    var settings = $.extend({}, defaults, options );

    var $container = this;
    var $ul = $('ul.recent-supporters', $container);
    var lastSupporterTimestamp = getMostRecentTimestamp();

    // check if easing is available
    // if not set it to 'linear'
    if (!$.easing || !$.easing[settings.cycleEasing]) {
      settings.cycleEasing = 'linear';
    }

    /**
     * Updates the recent supporters container (called upon AJAX success)
     * - checks if any new supporters needs to be inserted
     * - creates ul if needed
     * - calls function to add supporters
     *
     * @param {Object} data The received data, namespaced by an integer
     */
    function updateRecentSupportersContainer (data) {
      var supporters = data.supporters;
      var newSupporters = $.map(supporters, function (s, i) {
        if (parseInt(s.timestamp, 10) > lastSupporterTimestamp) {
          return s;
        }
      });

      // create the ul if the container was initialized empty
      if (settings.createListIfMissing && containerEmpty() && newSupporters.length > 0) {

        // subsitute the placeholder if available
        var $noActivityYet = $('.no-activity-yet', $container);
        if ($noActivityYet.length > 0) {
          $noActivityYet.after('<ul class="recent-supporters">');
          $noActivityYet.hide();
          $ul = $('.recent-supporters', $container);
        } else {
          $container.append('<ul class="recent-supporters">');
          $ul = $('.recent-supporters', $container);
        }
      }

      // sort the supporters by timestamp (in case they are not already)
      // (if more than 1 as 1 needs not to be sorted :)
      if (newSupporters.length > 1) {
        var newSortedSupporters = newSupporters.sort(function(a,b) { 
          return parseFloat(a.timestamp) - parseFloat(b.timestamp);
        });
      }

      // add new sorted supporters
      $.each(newSupporters, function (i, s) {
        addNewSupporter(s);
      });
    }

    /**
     * Adds a new supporter item into the DOM.
     * - checks for settings,
     * - resets visibility if needed,
     * - initializes timeago
     *
     * @param {Object} supporter The supporter object to be inserted.
     */
    function addNewSupporter (supporter) {
      var li = $('li:visible', $ul);
      var $newElement;
      var lastTimestamp = getMostRecentTimestamp();
      var liCount = $('li.supporter', $ul).length;
      // get the most recent supporter element
      // only the first one, if timestamp matches more than one supporter
      var $mostRecentElement = $('li span[data-timestamp="'+lastTimestamp+'"]', $ul).first().parent();

      // insert element hidden to not disturb any ongoing cycling
      $newElement = supporterElement(supporter);
      $newElement.hide();
      // if we created the ul just now, there is no mostRecentElement yet
      if ($mostRecentElement.length > 0) {
        $mostRecentElement.before($newElement);
      } else {
        $ul.append($newElement);
        setVisibleSupporters();
      }
      if ($.fn.timeago) {
        $('.time', $ul).timeago('updateFromDOM');
      }

      // remove supporters from DOM when maxSupporterInContainer treshold is hit
      // needs to remove only the last one as addNewSupporter will only add one at best
      if (settings.maxSupportersInContainer <= liCount) {
        var firstTimestamp = getLeastRecentTimestamp();
        // get the least recent supporter element
        // only the first one, if timestamp matches more than one supporter
        var $leastRecentElement = $('li span[data-timestamp="'+firstTimestamp+'"]', $ul).first().parent();
        $leastRecentElement.remove();

        // need to reset visibility as we do not check if removed element is
        // currently visible or not
        setVisibleSupporters();
      }

      // ensure the correct visibility
      setVisibleSupporters();

      // if we do cycle, we do not show the element immediatly but rely on
      // the cycling to show our new element; if we do not cycle we have to
      // take care for ourself to show the new element
      if (!settings.cycleSupporters) {
        $newElement.slideDown({duration: 200, easing: settings.cycleEasing});
        // hide any elements which are too much
        if ($('li', $ul).length > settings.maxSupportersVisible) {
          $('li:visible', $ul).last().slideUp({duration: 200, easing: settings.cycleEasing});
        }
      }

      // update variable used when updating the list.
      if (lastSupporterTimestamp < supporter.timestamp) {
        lastSupporterTimestamp = supporter.timestamp;
      }
    }

    /**
     * Generates a new supporter element from supporter object.
     *
     * @param {Object} supporter A single supporter object.
     * @return {Object} Returns a jQuery li object ready to be inserted into the DOM.
     */
    function supporterElement (supporter) {
      var $li = $('<li>');
      var timestamp = supporter.timestamp || Math.floor(new Date().getTime() / 1000);
      var lastName = '<span class="last_name">'+supporter.last_name+'</span>';
      var name = [supporter.first_name, lastName].join(" ")
      var nameHtml = '<span class="name">'+name+'</span>';

      var text = nameHtml;
      if (typeof supporter.action_type !== 'undefined' && supporter.action_type) {
        var tokens = {
          "!supporter_name": nameHtml,
          "!action_title": '<span class="title">'+supporter.action_title+"</span>"
        }
        if (typeof supporter.action_url !== 'undefined') {
          tokens["!action_title"] = '<span class="title"><a href="'+supporter.action_url+'" title="'+supporter.action_title+'">'+supporter.action_title+'</a></span>';
        }
        if (typeof settings.texts[supporter.action_type] !== 'undefined' && settings.texts[supporter.action_type].length > 0) {
          text = replaceTokensInText(settings.texts[supporter.action_type], tokens);
        }
      }
      var supporterHtml = text;
      supporterHtml += "\n"+'<span class="time" data-timestamp="'+timestamp+'" title="'+supporter.rfc8601+'">'+timestamp+'</span>';
      $li.addClass('supporter clearfix').append(supporterHtml);

      if (typeof supporter.action_type !== 'undefined' && supporter.action_type.length > 0) {
        $li.addClass('action-type-'+supporter.action_type);
      }

      if (settings.showCountry) {
        var countryCode = supporter.country ? supporter.country.toLowerCase() : "no-cc";
        var countryName = supporter.country in settings.countries ? settings.countries[supporter.country] : '';
        $li.prepend('<span title="'+countryName+'" class="country flag flag-'+countryCode+'">'+countryCode+'</span> ');
      }
      if (settings.showComment) {
        $li.append('<span class="comment">' + supporter.comment + '</span> ')
      }

      return $li;
    }

    /**
     * Subsitutes tokens in a string with provided replacement strings.
     *
     * @param {String} text A string with tokens to replace (tokens like "!token")
     * @param {Object}  tokens A object with token strings (e.g. "!token") as keys, and substitution strings (e.g. "Subsitution string") as values.
     * @return {String} Returns the text string with any found tokens replaced, but leaves tokens where no substitution was provided.
     */
    function replaceTokensInText (text, tokens) {
      text = text.replace(/(![A-Za-z_-]+)/g, function(a,b) {
        return (typeof tokens[b] !== 'undefined') ? tokens[b] : b;
      });
      return text
    }

    /**
     * Checks if the container is empty.
     * e.g. when loaded without any supporters in initial markup
     *
     * @return {Boolean} Returns true if empty, false otherwise
     */
    function containerEmpty () {
      return $('ul.recent-supporters', $container).length > 0 ? false : true;
    }

    /**
     * Get the most recent timestamp of the supporters.
     *
     * @return {Integer} Returns the most recent timestamp
     */
    function getMostRecentTimestamp () {
      var li = $('li .time', $ul);
      var timestamps = li.map(function (i, el) {
        return parseInt(el.getAttribute('data-timestamp'), 10);
      });
      return Math.max.apply(Math, timestamps.get());
    }

    /**
     * Get the least recent timestamp of the supporters.
     *
     * @return {Integer} Returns the least recent timestamp
     */
    function getLeastRecentTimestamp () {
      var li = $('li .time', $ul);
      var timestamps = li.map(function (i, el) {
        return parseInt(el.getAttribute('data-timestamp'), 10);
      });
      return Math.min.apply(Math, timestamps.get());
    }

    /**
     * Sets the visibility of the supporters.
     * Show only the maxSupportersVisible number of supporters.
     */
    function setVisibleSupporters() {
      $('li.supporter', $ul).show().slice(settings.maxSupportersVisible).hide();
    }

    /**
     * Cycles to the next supporter. Cycles only 1 by 1 supporter.
     */
    function cycleSupporters() {
      var supporterElements = $('li.supporter', $ul);
      // move last element to top in list and show hide
      // if there is at least one supporter more loaded then shown
      if (supporterElements.length > settings.maxSupportersVisible) {
        var minHeight = $container.height();
        $container.css({minHeight: minHeight + 'px'});
        $('li:visible', $ul).last().slideUp({duration: 200, easing: settings.cycleEasing});
        supporterElements.last().hide().detach().prependTo($ul).slideDown({duration: 200, easing: settings.cycleEasing});
      }
    }

    // set number of visible supporters
    setVisibleSupporters();

    // start cycling if enabled
    if (settings.cycleSupporters) {
      setInterval(function() {
        cycleSupporters();
      }, settings.cycleInterval);
    }

    if (this.length > 0) {
      // initialize timeago (if available)
      if ($.fn.timeago) {
        $('.time', $ul).timeago('updateFromDOM');
        // set update interval
        setInterval(function() {
          $('.time', $ul).timeago('updateFromDOM');
        }, settings.updateTimeagoInterval);
      }
    }

    this.update = updateRecentSupportersContainer;
    return this;
  }
})(jQuery);

;
// Generated by CoffeeScript 1.9.3
var $, RecentSupportersGlobal, RecentSupportersItem, construct_from_element;

$ = jQuery;

RecentSupportersItem = (function() {
  function RecentSupportersItem(settings, element) {
    this.settings = settings;
    this.fn = element.recentSupporters(this.settings);
  }

  RecentSupportersItem.prototype.poll = function() {
    var callback;
    callback = (function(_this) {
      return function(data) {
        data = data.recent_supporters[_this.settings.field_name][_this.settings.delta];
        _this.fn.update({
          supporters: data
        });
      };
    })(this);
    return Drupal.behaviors.polling.registry.registerUrl(this.settings.pollingURL, this.settings.id, callback);
  };

  return RecentSupportersItem;

})();

RecentSupportersGlobal = (function() {
  function RecentSupportersGlobal(settings, element) {
    this.settings = settings;
    this.fn = element.recentSupporters(this.settings);
  }

  RecentSupportersGlobal.prototype.poll = function() {
    var callback;
    callback = (function(_this) {
      return function(data) {
        data = data.recent_supporters;
        _this.fn.update({
          supporters: data
        });
      };
    })(this);
    return Drupal.behaviors.polling.registry.registerUrl(this.settings.pollingURL, this.settings.id, callback);
  };

  return RecentSupportersGlobal;

})();

construct_from_element = function($element) {
  var id, settings;
  id = $element.attr('id');
  settings = Drupal.settings.recentSupporters.blocks[id];
  settings['id'] = id;
  if (settings.allActions) {
    settings['texts'] = Drupal.settings.recentSupporters.actionTexts;
    return new RecentSupportersGlobal(settings, $element);
  } else {
    return new RecentSupportersItem(settings, $element);
  }
};

Drupal.behaviors.recent_supporters = {};

Drupal.behaviors.recent_supporters.attach = function(context, settings) {
  return $('.recent-supporters-wrapper', context).each(function() {
    var item;
    item = construct_from_element($(this));
    if (item) {
      return item.poll();
    }
  });
};
;
(function ($) {

var SessionStorage = function(pfx) {
  this.pfx = pfx;
};

SessionStorage.prototype.browserSupport = function() {
  // this is taken from modernizr.
  var mod = 'modernizr';
  try {
    localStorage.setItem(mod, mod);
    localStorage.removeItem(mod);
    return true;
  } catch(e) {
    return false;
  }
};

SessionStorage.prototype.setItem = function(key, value) {
  return sessionStorage.setItem(this.pfx + ':' + key, JSON.stringify(value));
};

SessionStorage.prototype.getItem = function(key) {
  try {
    var v = sessionStorage.getItem(this.pfx + ':' + key);
    if (v !== null) {
      v = JSON.parse(v);
    }
    return v;
  }
  catch(e) {
    return null;
  }
};

SessionStorage.prototype.getFirst = function(keys) {
  // Get value from all possible keys.
  var value = null;
  for (var i=0; i<keys.length; i++) {
    var key = keys[i];
    value = prefillStore.getItem(key);
    if (value) {
      return value;
    }
  }
  return null;
};

var prefillStore = new SessionStorage('webform_prefill')


var FormValList = function($e, name_attr) {
  this.$e = $e;
  this.name_attr = name_attr || 'name';
  this.name = $e.attr(this.name_attr);
  this.cache_key = this.pfxMap(this.name);
};

FormValList.prototype.getVal = function() {
  var $e = this.$e;
  var type = $e.attr('type');
  if (type == 'checkbox' || type == 'radio') {
    $e = $e.closest('form').find('input:'+type+'['+this.name_attr+'="'+this.name+'"]:checked');
  }
  var val = $e.val() || [];
  return (val.constructor === Array) ? val : [val];
};

FormValList.prototype.getAllByName = function() {
  return this.$e.closest('form')
    .find('['+this.name_attr+'="'+this.name+'"]')
    .filter('input:checkbox, input:radio, select[multiple]');
};

FormValList.prototype.pfxMap = function(x) {
  return 'l:' + x;
}

var FormValSingle = function($e, name_attr) {
  this.$e = $e;
  this.name_attr = name_attr || 'name';
  this.name = $e.attr(this.name_attr);
  this.cache_key = this.pfxMap(this.name);
};

FormValSingle.prototype.getVal = function() {
  return this.$e.val();
};

FormValSingle.prototype.getAllByName = function() {
  return this.$e.closest('form')
    .find('['+this.name_attr+'="'+this.name+'"]')
    .not('input:checkbox, input:radio, select[multiple]');
};

FormValSingle.prototype.pfxMap = function(x) {
  return 's:' + x;
}

Drupal.behaviors.webform_prefill = {};

Drupal.behaviors.webform_prefill.elementFactory = function ($e, name_attr) {
  name_attr = name_attr || 'data-form-key';
  var type = $e.attr('type');
  if (type == 'checkbox' || type == 'radio' || $e.is('select[multiple]')) {
    return new FormValList($e, name_attr);
  }
  return new FormValSingle($e, name_attr);
};

Drupal.behaviors.webform_prefill.formKey = function($e) {
  var name = $e.attr('name');
  if (!name) {
    return;
  }
  if ($e.attr('type') == 'checkbox') {
    name = name.slice(0, -(2 + $e.attr('value').length));
  }
  return name.slice(name.lastIndexOf('[')+1, -1);
};

Drupal.behaviors.webform_prefill._keys = function(name) {
  if (name in this.settings.map) {
    return this.settings.map[name];
  }
  return [name];
};

Drupal.behaviors.webform_prefill.keys = function(val) {
  return $.map(this._keys(val.name), val.pfxMap);
};

Drupal.behaviors.webform_prefill.attachToInputs = function($wrapper) {
  var self = this;
  var $inputs = $wrapper.find('input, select, textarea').not(function(i, element) {
    // Exclude file elements. We can't prefill those.
    if ($(element).attr('type') == 'file') {
      return true;
    }
    // Check nearest include and exclude-wrapper.
    var $exclude = $(element).closest('.webform-prefill-exclude');
    var $include = $(element).closest('.webform-prefill-include');
    if ($exclude.length > 0) {
      // Exclude unless there is an include-wrapper inside the exclude wrapper.
      return $include.length <= 0 || $.contains($include.get(), $exclude.get());
    }
    return false;
  });

  $inputs.not('[data-form-key]').each(function() {
    var $e = $(this);
    var fk = self.formKey($e);
    if (fk) {
      $e.attr('data-form-key', fk);
    }
  });

  var done = {};
  $inputs.each(function() {
    var e = self.elementFactory($(this));
    if (!(e.cache_key in done)) {
      done[e.cache_key] = true;

      // Get value from all possible keys.
      var value = prefillStore.getFirst(self.keys(e));
      if (value !== null) {
        e.getAllByName().val(value);
      }
    }
  });

  $inputs.on('change', function() {
    var e = self.elementFactory($(this));
    if (!e.name) { return; }
    prefillStore.setItem(e.cache_key, e.getVal());
  });
};

Drupal.behaviors.webform_prefill.attach = function(context, settings) {
  if (!prefillStore.browserSupport()) { return; }

  if (typeof this.settings === 'undefined') {
    var hash = window.location.hash.substr(1);
    if (hash) {
      var new_hash = this.readUrlVars(hash);
      if (new_hash != hash) {
        window.location.hash = '#' + new_hash;
      }
    }
    if ('webform_prefill' in Drupal.settings) {
      this.settings = Drupal.settings.webform_prefill;
    }
    else {
      this.settings = {map: {}};
    }
  }

  this.attachToInputs($('.webform-client-form', context));
};

/**
 * Parse the hash from the hash string and clean them from the string.
 *
 * The hash string is first split into parts using a semi-colon";" as a
 * separator. Each part that contains prefill variables (with the "p:"-prefix)
 * is then removed.
 *
 * All prefill-values are stored into the session store.
 */
Drupal.behaviors.webform_prefill.readUrlVars = function(hash, store) {
  hash = hash || window.location.hash.substr(1);
  if (!hash) {
    return '';
  }
  store = store || prefillStore;
  var vars = {}, key, value, p, parts, new_parts = [];
  parts = hash.split(';');
  for (var j = 0; j < parts.length; j++) {
    var part_has_prefill_vars = false;
    var part = parts[j];
    // Parts starting with p: are used for pre-filling.
    if (part.substr(0, 2) == 'p:') {
      var hashes = part.substr(2).split('&');
      for (var i = 0; i < hashes.length; i++) {
        p = hashes[i].indexOf('=');
        key = hashes[i].substring(0, p);
        // Backwards compatibility strip p: prefixes from keys.
        if (key.substr(0, 2) == 'p:') {
          key = key.substr(2);
        }
        value = hashes[i].substring(p+1);
          // Prepare values to be set as list values.
        if (!(key in vars)) {
          vars[key] = [];
        }
        vars[key].push(value);
        // Set string values directly.
        store.setItem('s:' + key, value);
      }
    }
    else {
      new_parts.push(part);
    }
  }

  // Finally set all list values.
  $.each(vars, function(key, value) {
    store.setItem('l:' + key, value);
  });

  return new_parts.join(';');
};

}(jQuery));
;
(function($) {

Drupal.behaviors.webform_steps = {};
Drupal.behaviors.webform_steps.attach = function(context, settings) {

$('.webform-client-form', context).each(function() {
  var $form = $(this);
  var $steps = $form.find('.webform-progressbar .webform-progressbar-page');
  $form.find('.webform-steps-buttons .step-button').each(function(i) {
    var $button = $(this);
    if ($button.is(':enabled')) {
      $($steps[i]).click(function(event) {
        $button.click();
      }).addClass('clickable').css('cursor', 'pointer');
    }
  });
});

}
})(jQuery);
;
(function($) {

Drupal.behaviors.webform_tracking = {
  extra_parameters: {
    "source"   : "s",
    "medium"   : "m",
    "version"  : "v",
    "other"    : "o",
    "term"     : "t",
    "campaign" : "c",
    "refsid"   : "refsid",
  },
  google_analytics: {
    "source"   : "utm_source",
    "medium"   : "utm_medium",
    "term"     : "utm_term",
    "version"  : "utm_content",
    "campaign" : "utm_campaign",
  },

  attach: function(context) {
    // Run only once per page-load.
    if (context == document) {
      this.run();
    }
  },

  // Get white listed parameters.
  extract_parameters: function(parameters) {
    var data = {};
    var map = this.extra_parameters;
    for (var key in map) {
      var candidates = [key, map[key], this.google_analytics[key]];

      // Take first candidate key with a value.
      for (var i = 0, l = candidates.length; i < l; i++) {
        var value = parameters[candidates[i]];
        if (value) {
          data[key] = value;
          break;
        }
      }
    }
    return data;
  },

  // Adds the URL to a history array (if needed).
  history_add: function(history, url) {
    var length = history.length;
    if (length) {
      // Only add new values (ignore page refreshes).
      if (history[history.length-1] != url) {
        history.push(url);
      }
    }
    else {
      length = history.push(url);
    }
    // Truncate the array if it gets too big.
    if (length > 10) {
      // We keep:
      // [0] is the entry page
      // [-3] might be the last page before the form == referer
      // [-2] might be the form
      // [-1] might be the forms /done page
      // 10 is an arbitrary value, you just might want to avoid
      // calling the array functions below on every request if not
      // necessary.
      history = [history[0]];
      $.merge(history, history.slice(-3));
    }
  },

  run: function() {
    var tracking_data = $.extend({
      history: [],
      tags: [],
    }, JSON.parse($.cookie('webform_tracking')) || {});
    var parameters = this.get_url_parameters();
    var base_url = Drupal.settings.webform_tracking.base_url;

    var dnt = window.navigator.doNotTrack;
    var respect_dnt = Drupal.settings.webform_tracking.respect_dnt;
    if ((dnt === "yes" || dnt == "1") && respect_dnt) {
      return;
    }

    tracking_data.user_id = tracking_data.user_id || this.new_user_id();

    // tags
    var tags = tracking_data.tags || [];
    if (typeof parameters['tag'] !== 'undefined') {
      $.merge(tags, parameters['tag'].split(','));
    }
    tracking_data.tags = this.sort_unique(tags);

    // extra parameters
    $.extend(tracking_data, this.extract_parameters(parameters));

    // If the referer does not start with $base_url, it's external but we
    // only take the first external referer to avoid problems with off-site
    // redirects (e.g. in payment forms).
    // if no referer is send, check if we got one via the GET-parameters
    if (typeof tracking_data['external_referer'] === 'undefined') {
      if (document.referrer.indexOf(base_url) !== 0) {
        tracking_data['external_referer'] = document.referrer;
      }
      else if (typeof parameters['external_referer'] !== 'undefined' && parameters['external_referer'].indexOf(base_url) !== 0) {
        tracking_data['external_referer'] = parameters['external_referer'];
      }
    }

    // history
    this.history_add(tracking_data.history, window.location.href);

    $.cookie('webform_tracking', JSON.stringify(tracking_data), {path: '/'});
  },

  get_url_parameters: function() {
    var parameters = {};
    var variables = window.location.search.substring(1).split('&');
    for (var i = 0; i < variables.length; i++) {
      var parameter = variables[i].split('=');
      parameters[parameter[0]] = parameter[1];
    };
    return parameters;
  },

  new_user_id: function() {
    // http://x443.wordpress.com/2012/03/18/adler32-checksum-in-javascript/
    var adler32 =  function(a,b,c,d,e,f) {
      for (b=65521,c=1,d=e=0;f=a.charCodeAt(e++); d=(d+c)%b) c=(c+f)%b;
      return(d<<16)|c
    }
    return adler32(String(Math.random() + Date.now()));
  },

  sort_unique: function(array) {
    if (!array.length) {
      return array;
    }
    array = array.sort(function (a, b) { return a - b; });
    var result = [array[0]];
    for (var i = 1; i < array.length; i++) {
      if (array[i-1] !== array[i]) {
        result.push(array[i]);
      }
    }
    return result;
  }
}

})(jQuery);
;
